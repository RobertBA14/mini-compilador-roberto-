# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EL9nx_sv0autpRCWntNcyAYMorJkuzyC
"""

import re
from IPython.display import display, HTML

# -----------------------------
#  1. Analizador Léxico
# -----------------------------
def lexer(code):
    token_specification = [
        ('NUMBER',   r'\d+'),
        ('PAPER',    r'Paper'),
        ('PEN',      r'Pen'),
        ('LINE',     r'Line'),
        ('ID',       r'[a-zA-Z_]\w*'),
        ('NEWLINE',  r'\n'),
        ('SKIP',     r'[ \t]+'),
        ('MISMATCH', r'.'),
    ]
    token_regex = '|'.join('(?P<%s>%s)' % pair for pair in token_specification)
    tokens = []
    for mo in re.finditer(token_regex, code):
        kind = mo.lastgroup
        value = mo.group()
        if kind == 'NUMBER':
            tokens.append(('NUMBER', int(value)))
        elif kind in ('PAPER', 'PEN', 'LINE'):
            tokens.append((kind, value))
        elif kind == 'NEWLINE' or kind == 'SKIP':
            continue
        elif kind == 'MISMATCH':
            raise SyntaxError(f"Caracter ilegal: {value}")
    return tokens

# -----------------------------
#  2. Analizador Sintáctico
# -----------------------------
def parser(tokens):
    ast = []
    i = 0
    while i < len(tokens):
        if tokens[i][0] == 'PAPER':  # Paper N
            ast.append(('PAPER', tokens[i+1][1]))
            i += 2
        elif tokens[i][0] == 'PEN':  # Pen N
            ast.append(('PEN', tokens[i+1][1]))
            i += 2
        elif tokens[i][0] == 'LINE':  # Line x1 y1 x2 y2
            line = ('LINE', tokens[i+1][1], tokens[i+2][1], tokens[i+3][1], tokens[i+4][1])
            ast.append(line)
            i += 5
        else:
            raise SyntaxError(f"Token inesperado: {tokens[i]}")
    return ast

# -----------------------------
#  3. Tabla de Símbolos (opcional aquí)
# -----------------------------
def generate_symbol_table(ast):
    table = []
    for node in ast:
        if node[0] == 'PAPER':
            table.append({'Tipo': 'Lienzo', 'Valor': node[1]})
        elif node[0] == 'PEN':
            table.append({'Tipo': 'Color', 'Valor': node[1]})
        elif node[0] == 'LINE':
            table.append({'Tipo': 'Línea', 'Coordenadas': node[1:]})
    return table

# -----------------------------
#  4. Generación de Código Intermedio
# -----------------------------
def generate_intermediate_code(ast):
    code = []
    for node in ast:
        if node[0] == 'PAPER':
            code.append(f"CANVAS {node[1]}")
        elif node[0] == 'PEN':
            code.append(f"SET_COLOR {node[1]}")
        elif node[0] == 'LINE':
            code.append(f"DRAW_LINE {node[1:]}")
    return code

# -----------------------------
# 5. Generador de SVG
# -----------------------------
def generate_svg(ast):
    width = height = 100
    pen_color = "white"
    color_map = {0: "white", 1: "red", 2: "blue"}
    lines = []
    for node in ast:
        if node[0] == 'PAPER':
            width = height = node[1]
        elif node[0] == 'PEN':
            pen_color = color_map.get(node[1], "white")
        elif node[0] == 'LINE':
            x1, y1, x2, y2 = node[1:]
            lines.append(f'<line x1="{x1}" y1="{y1}" x2="{x2}" y2="{y2}" stroke="{pen_color}" stroke-width="2"/>')
    svg_code = f'''
<svg width="{width}" height="{height}" viewBox="0 0 {width} {height}" xmlns="http://www.w3.org/2000/svg" style="background:black">
  {chr(10).join(lines)}
</svg>
'''
    return svg_code

# -----------------------------
#  Entrada del usuario
# -----------------------------
print("Escribe tu programa (Enter doble para terminar):")
lines = []
while True:
    line = input()
    if line.strip() == "":
        break
    lines.append(line)

source_code = "\n".join(lines)

# Pipeline del compilador
tokens = lexer(source_code)
print("\n Tokens:", tokens)

ast = parser(tokens)
print("\n AST:", ast)

symbols = generate_symbol_table(ast)
print("\n Tabla de Símbolos:", symbols)

intermediate = generate_intermediate_code(ast)
print("\n Código Intermedio:")
print("\n".join(intermediate))

svg_output = generate_svg(ast)
display(HTML(svg_output))